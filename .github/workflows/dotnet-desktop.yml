name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  
                             

    env:
      Solution_Name: FacialRecognition.sln                         
      Wap_Project_Directory: FaceRecognitionPackage
      Wap_Project_Path: FaceRecognitionPackage/FaceRecognitionPackage.wapproj
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Add MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        # Define the certificate path and set it as an output variable
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath "GitHubActionsWorkflow.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
        # Set the path as an output variable
        Write-Host "certificatePath=$certificatePath" >> $GITHUB_ENV

        # List the files in the Wap_Project_Directory to ensure the pfx file was written
        Get-ChildItem $env:Wap_Project_Directory

    # Export the certificate to .cer format
    - name: Export the certificate
      run: |
        # Log the certificate path
        Write-Host "Certificate Path: $certificatePath"

        # Access the certificate path from the environment variable
        $certificatePath = $env:certificatePath
        
        # Check if the certificate file exists
        if (-Not (Test-Path "$certificatePath")) {
            Write-Error "The certificate file does not exist at $certificatePath."
            exit 1
        }
    
        # Create the X509Certificate2 object directly using the .pfx file and password
        try {
            $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2("$certificatePath", "${{ secrets.Pfx_Key }}", [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::MachineKeySet)
        } catch {
            Write-Error "Failed to load the certificate. Error: $_"
            exit 1
        }

        # Export the certificate to .cer format
        $cerPath = Join-Path -Path $env:Wap_Project_Directory -ChildPath "ExportedCertificate.cer"
        [IO.File]::WriteAllBytes("$cerPath", $cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert))
        Write-Host "Certificate exported to $cerPath"

        # List the contents of the Wap_Project_Directory to confirm the .cer file was created
        Get-ChildItem $env:Wap_Project_Directory

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: SideLoadOnly
        Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MSIX_Package-${{ matrix.configuration }}-${{ github.run_id }}
        path: ${{ env.Wap_Project_Directory }}\AppPackages

    # Upload the exported certificate
    - name: Upload exported certificate
      uses: actions/upload-artifact@v4
      with:
        name: ExportedCertificate
        path: ${{ env.Wap_Project_Directory }}\ExportedCertificate.cer
